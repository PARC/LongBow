#! /usr/bin/env python
# Copyright (c) 2014-2015, Xerox Corporation (Xerox) and Palo Alto Research Center, Inc (PARC)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL XEROX OR PARC BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ################################################################################
# #
# # PATENT NOTICE
# #
# # This software is distributed under the BSD 2-clause License (see LICENSE
# # file).  This BSD License does not make any patent claims and as such, does
# # not act as a patent grant.  The purpose of this section is for each contributor
# # to define their intentions with respect to intellectual property.
# #
# # Each contributor to this source code is encouraged to state their patent
# # claims and licensing mechanisms for any contributions made. At the end of
# # this section contributors may each make their own statements.  Contributor's
# # claims and grants only apply to the pieces (source code, programs, text,
# # media, etc) that they have contributed directly to this software.
# #
# # There is no guarantee that this section is complete, up to date or accurate. It
# # is up to the contributors to maintain their portion of this section and up to
# # the user of the software to verify any claims herein.
# #
# # Do not remove this header notification.  The contents of this section must be
# # present in all distributions of the software.  You may only modify your own
# # intellectual property statements.  Please provide contact information.
#
# - Palo Alto Research Center, Inc
# This software distribution does not grant any rights to patents owned by Palo
# Alto Research Center, Inc (PARC). Rights to these patents are available via
# various mechanisms. As of January 2016 PARC has committed to FRAND licensing any
# intellectual property used by its contributions to this software. You may
# contact PARC at cipo@parc.com for more information or visit http://www.ccnx.org
#
# @author Glenn Scott, Palo Alto Research Center (PARC)
# @copyright (c) 2014-2015, Xerox Corporation (Xerox) and Palo Alto Research Center, Inc (PARC).  All rights reserved.
import os
import glob

import fnmatch
import subprocess

def findFiles(startDir, pattern):
    matches = []
    for root, dirnames, filenames in os.walk(startDir):
        for filename in fnmatch.filter(filenames, pattern):
            matches.append(os.path.join(root, filename))

    return matches

def getLibPathForObject(libraryPath, filename):
    '''
    Returns a path to an object file suitable for nm
    '''
    result = ''

    command = ['/usr/bin/ar', '-t', libraryPath]
    output = subprocess.check_output(command)
    lines = output.splitlines()

    for line in lines:
        tokens = line.split('.')
        if tokens[0] == filename:
            result = libraryPath + '(' + line + ')'
            break

    return result

class Module:
    '''Represent a C language module.
    A module consists of the file names of the C source, C header file, object file, and an executable file
    A module can be queried for a variety of things based on the PARC file name conventions.'''
    def __init__(self, srcPath, objectDirs=[]):
        self.path = self.initialzePath(srcPath)
        if not objectDirs:
            objectDirs = [self.path]
        split = srcPath.split("/")
        self.originalName = split[len(split) - 1]
        self.originalBaseName = os.path.basename(srcPath)
        tokens = self.originalBaseName.split('.')
        self.fileName = tokens[0].replace("/","")

        if self.fileName.startswith("test_"):
            self.fileName = self.fileName[5:]

        # Search for an appropriate object
        self.objectPath = "";
        for objectDir in objectDirs:
            if objectDir.endswith(".a"):
                self.objectPath = getLibPathForObject(objectDir, self.fileName)
                if self.objectPath:
                    break
            else:
                objectSearchPath = os.path.join(objectDir, self.fileName) + "*.o*"
                ofiles = glob.glob(objectSearchPath);
                if ofiles:
                    # if we've found some matches, assume we want the first.
                    self.objectPath = ofiles[0];
                    break
        return

    def isTestExecutableName(self):
        return self.getTestExecutableName() == self.originalBaseName

    def isTestSourceName(self):
        return self.getTestSourceName() == self.originalBaseName

    def isCSourceName(self):
        return self.getCSourceName() == self.originalBaseName

    def isCHeaderName(self):
        return self.getCHeaderName() == self.originalBaseName

    def getCSourceName(self):
        return self.fileName + ".c"

    def getCHeaderName(self):
        return self.fileName + ".h"

    def getPathToObjectFile(self):
        return self.objectPath;

    def getExecutableName(self):
        return self.fileName

    def getTestExecutableName(self):
        return "test_" + self.fileName

    def getTestSourceName(self):
        return self.getTestExecutableName() + ".c"

    def getNamespace(self):
        sourceFileName = self.getCSourceName()
        if (sourceFileName.find("_") >= 0):
            stripped = sourceFileName[0:sourceFileName.index("_")]
            return stripped
        else:
            return None

    def getModuleName(self):
        sourceFileName = self.getCSourceName()
        split = sourceFileName.split("/")
        sourceFileName = split[len(split) - 1]
        if (sourceFileName.find(".") >= 0):
            stripped = sourceFileName[0:sourceFileName.index(".")]
            return stripped
        else:
            return None

    def getModulePrefix(self):
        sourceFileName = self.getCSourceName()
        squashed = sourceFileName.replace("_", "")
        if (squashed.find(".") >= 0):
            return squashed[0:squashed.index(".")]
        else:
            return None

    def getTypeName(self):
        sourceFileName = self.getCSourceName()
        if (sourceFileName.find(".") >= 0 and sourceFileName.find("_") >= 0):
            stripped = sourceFileName[(sourceFileName.index("_") + 1):sourceFileName.index(".")]
            return stripped
        else:
            return None

    def getModulePath(self):
        return self.path

    def initialzePath(self, sourceFileName):
        parts = sourceFileName.split("/")
        parts = parts[0:len(parts) - 1]
        return '/'.join(map(str, parts))

if __name__ == '__main__':
    cFile = Module("file.c.gcov")
    if cFile.getCSourceName() != "file.c":
        print "getCSourceName failed",  cFile.getCSourceName()

    if cFile.getCHeaderName() != "file.h":
        print "getCHeaderName failed", cFile.getCHeaderName()

    if cFile.getTestSourceName() != "test_file.c":
        print "getTestSourceName failed", cFile.getTestSourceName()

    if cFile.getTestExecutableName() != "test_file":
        print "getTestExecutableName failed", cFile.getTestExecutableName()

    if cFile.getNamespace() != None:
        print "getNamespace failed", cFile.getNamespace()

    if cFile.getModuleName() != "file":
        print "getModuleName failed", cFile.getModuleName()

    if cFile.getModulePrefix() != "file":
        print "getModulePrefix failed", cFile.getModulePrefix()

    if cFile.getTypeName() != None:
        print "getTypeName failed", cFile.getTypeName()

    cFile = Module("parc_Object.c.gcov")
    if cFile.getCSourceName() != "parc_Object.c":
        print "getCSourceName failed",  cFile.getCSourceName()

    if cFile.getCHeaderName() != "parc_Object.h":
        print "getCHeaderName failed", cFile.getCHeaderName()

    if cFile.getTestSourceName() != "test_parc_Object.c":
        print "getTestSourceName failed", cFile.getTestSourceName()

    if cFile.getTestExecutableName() != "test_parc_Object":
        print "getTestExecutableName failed", cFile.getTestExecutableName()

    if cFile.getNamespace() != "parc":
        print "getNamespace failed", cFile.getNamespace()

    if cFile.getModuleName() != "parc_Object":
        print "getModuleName failed", cFile.getModuleName()

    if cFile.getModulePrefix() != "parcObject":
        print "getModulePrefix failed", cFile.getModulePrefix()

    if cFile.getTypeName() != "Object":
        print "getTypeName failed", cFile.getTypeName()
