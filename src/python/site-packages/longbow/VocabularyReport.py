#! /usr/bin/env python
# Copyright (c) 2014, Xerox Corporation (Xerox) and Palo Alto Research Center, Inc (PARC)
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL XEROX OR PARC BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# ################################################################################
# #
# # PATENT NOTICE
# #
# # This software is distributed under the BSD 2-clause License (see LICENSE
# # file).  This BSD License does not make any patent claims and as such, does
# # not act as a patent grant.  The purpose of this section is for each contributor
# # to define their intentions with respect to intellectual property.
# #
# # Each contributor to this source code is encouraged to state their patent
# # claims and licensing mechanisms for any contributions made. At the end of
# # this section contributors may each make their own statements.  Contributor's
# # claims and grants only apply to the pieces (source code, programs, text,
# # media, etc) that they have contributed directly to this software.
# #
# # There is no guarantee that this section is complete, up to date or accurate. It
# # is up to the contributors to maintain their portion of this section and up to
# # the user of the software to verify any claims herein.
# #
# # Do not remove this header notification.  The contents of this section must be
# # present in all distributions of the software.  You may only modify your own
# # intellectual property statements.  Please provide contact information.
# 
# - Palo Alto Research Center, Inc
# This software distribution does not grant any rights to patents owned by Palo
# Alto Research Center, Inc (PARC). Rights to these patents are available via
# various mechanisms. As of January 2016 PARC has committed to FRAND licensing any
# intellectual property used by its contributions to this software. You may
# contact PARC at cipo@parc.com for more information or visit http://www.ccnx.org
#
# @author Glenn Scott, Palo Alto Research Center (PARC)
# @copyright (c) 2014, Xerox Corporation (Xerox) and Palo Alto Research Center, Inc (PARC).  All rights reserved.

import sys
import itertools

import LongBow

def computeVocabularyScore(tokenCount):
	return 100.0


def csvFunctionResult(file, function):
	score = computeVocabularyScore(file.token_count)
	string = "vocabulary,%s,%s,%d,%d,%.2f" % (file.filename, function.name, function.start_line, function.token_count, score)

	LongBow.scorePrinter([90, 80], score, string)
	return function.token_count


def csvFileVocabulary(file):
	score = computeVocabularyScore(file.token_count)
	string = "vocabulary,%s,,,%.2f,%.2f" % (file.filename, file.average_token, score)
	LongBow.scorePrinter([90, 80], score, string)
	return


def csvFunction(fileInformationList):
	for fileInformation in fileInformationList:
		complexities = map(lambda function: csvFunctionResult(fileInformation, function), fileInformation)
	return


def csvSummary(fileInformationList):
	map(lambda file: csvFileVocabulary(file), fileInformationList)
	return


def textFunctionResult(file, function, maxFileNameLength, maxFunctionNameLength):
	score = computeVocabularyScore(function.token_count)
	format = "%-" + str(maxFileNameLength) + "s %-" + str(maxFunctionNameLength) + "s %3d %3d %6.2f"
	string = format % (file.filename, function.name, function.start_line, function.token_count, score)

	LongBow.scorePrinter([90, 80], score, string)
	return function.cyclomatic_complexity


def textFileVocabulary(file, maxFileNameLength, printFormat=""):
	score = computeVocabularyScore(file.average_CCN)
	if printFormat == "":
		printFormat = "%-" + str(maxFileNameLength) + "s %6.2f %6.2f"
	string =  printFormat % (file.filename, file.average_token, score)
	LongBow.scorePrinter([90, 80], score, string)
	return


def computeMaxFileNameLength(fileInformationList):
	result = 0
	for fileInformation in fileInformationList:
		if len(fileInformation.filename) > result:
			result = len(fileInformation.filename)
	return result


def computeMaxFunctionNameLength(fileInformationList):
	result = 0
	for fileInformation in fileInformationList:
		if len(fileInformation.filename) > result:
			result = len(fileInformation.filename)
	return result


def textFunction(fileInformationList):
		maxFileNameLength = max(map(lambda fileInformation: len(fileInformation.filename), fileInformationList))
		maxFunctionNameLength = max(map(lambda fileInformation: max(map(lambda function: len(function.name), fileInformation)), fileInformationList))

		for fileInformation in fileInformationList:
			complexities = map(lambda function: textFunctionResult(fileInformation, function,  maxFileNameLength, maxFunctionNameLength), fileInformation)
		return


def textSummary(fileInformationList, prefix=""):
	if len(fileInformationList) < 1:
		print "%sNo Files To Grade" % prefix
		return
	maxFileNameLength = max(map(lambda fileInformation: len(fileInformation.filename), fileInformationList))
	printFormat = prefix + "%-" + str(maxFileNameLength) + "s %10s %6s"
	print printFormat % ("File Path", "Ave Token", "Score")
	printFormat = prefix + "%-" + str(maxFileNameLength) + "s %10.2f %6.2f"
	map(lambda file: textFileVocabulary(file, maxFileNameLength, printFormat), fileInformationList)
	return


def computeAverage(fileInformationList):
	vocabulary = map(lambda fileInformation : fileInformation.average_token, fileInformationList)
	sum = reduce(lambda sum, x: sum + x, vocabulary)
	return float(sum) / float(len(vocabulary))


def gradeAndPrint(fileList, hfcca, problemsOnly=False, prefix=""):
	options, arguments = hfcca.createHfccaCommandLineParser().parse_args(args=["foo"])
	result = hfcca.analyze(fileList, options)

	# Convert from that iterator to a simple list...
	fileInformationList = map(lambda x : x, result)
	if problemsOnly:
		fileInformationList = filter(lambda item: computeVocabularyScore(item.average_CCN) < 100, fileInformationList)

	textSummary(fileInformationList, prefix)

def commandLineMain(args, hfcca):
	targets = []

	if args.stdin:
		for line in sys.stdin:
			t = line.strip()
			if (len(t) > 0):
				targets.append(t)
	else:
		targets = args.files

	if (len(targets) == 0):
		print >> sys.stderr, "Error: target list cannot be empty"

	# If nothing was specified, print the summary as a default
	if args.summary == False and args.function == False and args.average == False:
		args.summary = True

	options, arguments = hfcca.createHfccaCommandLineParser().parse_args(args=["VocabularyReport"])
	result = hfcca.analyze(targets, options)

	# Convert from that iterator to a simple list...
	fileInformationList = map(lambda x : x, result)

	if args.function:
		if args.output == "text":
			textFunction(fileInformationList)
		else:
			csvFunction(fileInformationList)

	if args.summary:
		if args.output == "text":
			textSummary(fileInformationList)
		else:
			csvSummary(fileInformationList)

	if args.average:
		print "%.2f" % computeAverage(fileInformationList)
