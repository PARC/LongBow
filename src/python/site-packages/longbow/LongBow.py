#! /usr/bin/env python
# Copyright (c) 2014, Xerox Corporation (Xerox)and Palo Alto Research Center (PARC)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Patent rights are not granted under this agreement. Patent rights are
#       available under FRAND terms.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL XEROX or PARC BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @author Glenn Scott, Palo Alto Research Center (PARC)
# @copyright 2014, Xerox Corporation (Xerox)and Palo Alto Research Center (PARC).  All rights reserved.
import sys

ansiRed = "\x1b[31m";
ansiGreen = "\x1b[32m";
ansiYellow = "\x1b[33m";
ansiMagenta = "\x1b[35m";
ansiReset = "\x1b[0m";


def buildRed(string):
    if sys.stdout.isatty():
        return ansiRed + string + ansiReset
    else:
        return string


def buildGreen(string):
    if sys.stdout.isatty():
        return ansiGreen + string + ansiReset
    else:
        return string


def buildYellow(string):
    if sys.stdout.isatty():
        return ansiYellow + string + ansiReset
    else:
        return string


def score(distribution, score):
    result = "red"

    if (score > distribution[0]):
        result = "green"
    elif (score > distribution[1]):
        result = "yellow"

    return result


def scoreBuilder(distribution, score, string):
    '''
    scores is a list of 2 decreasing values.
    The first is the minimum score for green, the second is the minimum score for yellow.
    The rest art red
    '''
    if (score > distribution[0]):
        return buildGreen(string)
    elif (score > distribution[1]):
        return buildYellow(string)
    else:
        return buildRed(string)


def scorePrinter(distribution, score, string):
    print scoreBuilder(distribution, score, string)


def countLines(fileName):
    i = 0
    with open(fileName) as f:
        for i, l in enumerate(f):
            pass
    return i + 1


def CFileNameToFunctionPrefix(fileName):
    '''
    Given the name of a C source file or header file,
    return the canonical name prefix for functions within that file.
    For example, the input name "parc_Buffer.c" results in "parcBuffer_"
    '''
    fileName = os.path.basename(fileName);
    fileNameSpace = os.path.splitext(fileName)[0]
    parts = fileNameSpace.partition("_")
    result = None
    if len(parts) == 3:
        result = parts[0] + parts[2] + "_"
    return result
