#! /usr/bin/env python
# Copyright (c) 2014, Xerox Corporation (Xerox)and Palo Alto Research Center (PARC)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Patent rights are not granted under this agreement. Patent rights are
#       available under FRAND terms.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL XEROX or PARC BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @author Glenn Scott, Palo Alto Research Center (PARC)
# @copyright 2014, Xerox Corporation (Xerox)and Palo Alto Research Center (PARC).  All rights reserved.
import os
import subprocess
import re
import sys
import pprint

def parseLocation(location):
  token = location.split("[")
  objectFileName = location

  if len(token) > 1:
    libraryName = token[0]
    objectFileName = token[1].split("]")[0]
  else:
    libraryName = None

  objectFileName = objectFileName.split(":")[0]
  return (libraryName, objectFileName)

def parseDarwinOutput(lines, accumulator = { }):

  for line in lines:
    token = line.split(" ")
    fullName = token[0]

    libraryName, objectFileName = parseLocation(token[0])
    name = token[1]
    type = token[2]
    if fullName in accumulator:
      if type == "U":
        accumulator[fullName]["undefined"].append({ "name" : name })
      elif type == "T":
        accumulator[fullName]["defined"].append({ "name" : name })
      elif type == "D":
        accumulator[fullName]["globalData"].append({ "name" : name })
    else:
      accumulator[fullName] = { "fullName" : fullName, "libraryName" : libraryName, "objectFileName" : objectFileName, "defined" : [], "undefined" : [], "globalData" : [] }

  return accumulator

def getDarwinSymbolTable(objectFileName, accumulator = { }):
  command = [ "/usr/bin/nm", "-PAog", objectFileName ]

  output = subprocess.check_output(command)
  lines = output.splitlines()
  return parseDarwinOutput(lines, accumulator)


def getSymbolTable(objectFileName, accumulator = { }):
  '''
  {
    fullName : { "defined" : list of dictionaries,
                 "undefined": list of dictionaries,
                 "globalData" : list of dictionaries,
                 "libraryName" : string
                 "objectFileName : string
               },
  }
  '''
  return getDarwinSymbolTable(objectFileName, accumulator)


if __name__ == '__main__':

  table = dict()
  for f in sys.argv:
    table = getSymbolTable(f, table)

  pp = pprint.PrettyPrinter(indent=4, width=132)

  pp.pprint(table)
